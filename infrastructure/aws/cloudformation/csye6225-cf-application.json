{  
 "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"Application Stack for CSYE 6225 - Spring 2019",
   "Parameters":{

      "circleci":{
         "Description":"circleci user",
         "Type":"String"
      },
      "NetworkStackNameParameter":{
         "Description":"Network Stack Name",
         "Type":"String"
      },
      "ApplicationStackNameParameter":{
         "Description":"Application Stack Name",
         "Type":"String"
      },
      "KeyName": {
         "Description": "EC2 KeyPair to enable SSH access to the instance",
         "Type": "AWS::EC2::KeyPair::KeyName"
      },
      "DBSGID": {

         "Type": "String"

      },
"LBSG": {

         "Type": "String"

      },
 "CERTIFICATE": {
      "Description": "ARN of SSL Certificate",
      "Type": "String"
    },
      
      "ImageID":{
         "Type":"String"
      },
      "PublicSubnetKey3":{
         "Type":"String"
      },
      "PublicSubnetKey2":{
         "Type":"String"
      },
      "DOMAIN":{
	 "Type":"String"
      },
      "PublicSubnetKey1":{
         "Type":"String"
      },
	"CDARN":{"Type": "String"},
	"CDARN1": {"Type": "String"},
	"Bucket":{"Type": "String"},
	"Bucket1":{"Type": "String"},
	"SGID": {

          "Type": "String"

      },

      "VpcID":{
         "Type":"String"
      },
	"S3Bucket":{
	"Type":"String"
	}
   },
   "Conditions":{
      "Is-EC2-VPC":{
         "Fn::Equals":[
            {
               "Ref":"AWS::Region"
            },
            "us-east-1"
         ]
      }
   },
   "Resources":{
  
      "RDSSubnetGroup":{
         "Type":"AWS::RDS::DBSubnetGroup",
         "Properties":{
            "DBSubnetGroupDescription":"Subnet group for RDS Instances",
            "SubnetIds":[
               {
                  "Ref":"PublicSubnetKey2"
               },
               {
                  "Ref":"PublicSubnetKey3"
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Sub":"csye6225-RDSSubnetGroup"
                  }
               }
            ]
         }
      },
    "AutoScalingConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {		
        "ImageId":{
               "Ref":"ImageID"
            },
	"AssociatePublicIpAddress": true,		
        "InstanceType": "t2.micro",
        "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sda1",
                  "Ebs":{
                     "VolumeType":"gp2",
                     "DeleteOnTermination":"true",
                     "VolumeSize":"20"
                  }
               }
            ],

        "KeyName": "csye6225-assignment8",

       "SecurityGroupIds":[
               {
                  "Ref":"SGID"
               }
            ],
              "UserData": {

          "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                "#!/bin/bash -xe", 
		"pwd",
		"mkdir /home/centos/WebApp",
		"cd /usr/lib/systemd/system",
                "touch kestrel.service",
                "sudo echo '[Unit]' > kestrel.service",
		"sudo echo 'Description=ASP.NET Core Web Application' >> kestrel.service",
                "sudo echo '[Service]' >> kestrel.service",
                "sudo echo 'WorkingDirectory=/home/centos/WebApp' >> kestrel.service",
		{"Fn::Join": ["",["sudo echo 'ExecStart=/usr/bin/dotnet /home/centos/WebApp/NoteApp_Production.dll " ,{"Ref": "S3Bucket"}," ",{
		"Fn::GetAtt":[ "RDSInstance", "Endpoint.Address"]}, " csye6225 csye6225master csye6225password' >> kestrel.service" ]]},

                "sudo echo 'User=centos' >> kestrel.service",
		"sudo echo 'SyslogIdentifier=WebApp' >> kestrel.service",
                "sudo echo 'Restart=always' >> kestrel.service",
		"sudo echo 'Environment=ASPNETCORE_ENVIRONMENT=Production' >> kestrel.service",
		"sudo echo 'RestartSec=10' >> kestrel.service",
                "sudo echo '[Install]' >> kestrel.service",
                "sudo echo 'WantedBy=multi-user.target' >> kestrel.service",
		"sudo su",
		"chown centos /usr/lib/systemd/system/kestrel.service",
		"chown centos /home/centos/WebApp"
                            ]
                        ]
                    }

        },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"ec2"
               }
            ],

        
        "IamInstanceProfile": "ec2instanceprofile"

      }

    },
    "DBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Condition": "Is-EC2-VPC",
			"Properties": {
				"GroupName": "csye6225-rds",
				"GroupDescription": "allow connections from specified source security group and ec2 Security group",
				"VpcId": {
					"Ref": "myVpc"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "3306",
					"ToPort": "3306",
					"SourceSecurityGroupId": {
						"Ref": "webappSecurityGroup"
					}
				}]
			}
		},
      "RDSInstance":{
         "Type":"AWS::RDS::DBInstance",
         "Properties":{
            "DBName":"csye6225",
            "AllocatedStorage":"100",
            "DBInstanceClass":"db.t2.medium",
            "Engine":"MySQL",
            "MasterUsername":"csye6225master",
            "MasterUserPassword":"csye6225password",
            "MultiAZ":false,
            "DBInstanceIdentifier":"csye6225-spring2019",
            "PubliclyAccessible":true,
            "Port":"3306",
            "DBSubnetGroupName":{
               "Ref":"RDSSubnetGroup"
            },
            "VPCSecurityGroups": [{"Ref": "DBSGID"}],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Sub":"csye6225-RDSInstance"
                  }
               }
            ]
         }
      },
      "DynamoDBTable":{
         "Type":"AWS::DynamoDB::Table",
         "Properties":{
            "AttributeDefinitions":[
               {
                  "AttributeName":"Id",
                  "AttributeType":"S"
               },
  	       {
                  "AttributeName":"Email",
                  "AttributeType":"S"
               }
            ],
            "KeySchema":[ {
                  "AttributeName":"Id",
                  "KeyType":"HASH"
               },{
                  "AttributeName":"Email",
                  "KeyType":"RANGE"
               }
            ],

            "ProvisionedThroughput":{
               "ReadCapacityUnits":"1",
               "WriteCapacityUnits":"1"
            },
            "TableName":"csye6225",
  "TimeToLiveSpecification": {
               "AttributeName": "passwordTokenExpiry",
               "Enabled": "true"
        },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Sub":"csye6225-DynamoDBTable"
                  }
               }
            ]
         }
      },

 "SNSAccess": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sns:*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ]
        },
        "ManagedPolicyName": "SNSAccess",
        "Roles": [{
          "Ref": "CodeDeployEC2ServiceRole"
        }]
      }
    },
       "CodeDeployEC2ServiceRole":{
         "Type":"AWS::IAM::Role",
         "Properties": {
				"RoleName": "CodeDeployEC2ServiceRole",

				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]

						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "CodeDeployEC2S3",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Action": [
								"s3:Get*",
								"s3:Put*",
								"s3:Delete*",
                                                                "s3:List*"
							],
							"Effect": "Allow",
							"Resource": [{"Ref": "CDARN"}, {"Ref":"CDARN1"}, {"Ref":"Bucket"}, {"Ref": "Bucket1"}]
						}]
					}

      				
					       }]
					}
      					},


    "LogRolePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            },

	   {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricAlarm",
                "cloudwatch:PutMetricData"
            ],
            "Resource": "*"
          }
          ]
        },
        "ManagedPolicyName":"LogRolePolicy",
	"Roles": [{
          "Ref": "CodeDeployEC2ServiceRole"
        }]
      }
    },

        "CodeDeployServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "CodeDeployServiceRole",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": "codedeploy.amazonaws.com"
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"],
				"Path": "/"
			}
		},
 "CodeDeployEC2S3": {
   "Type" : "AWS::IAM::Policy",
   "Properties" : {
      "PolicyName" : "CodeDeploy-EC2S3",
      "PolicyDocument" : {
            "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "s3:Get*",
                "s3:List*",
		"s3:Put*",
		"s3:Delete*"
            ],
            "Effect": "Allow",
            "Resource": [{"Ref": "CDARN"}, {"Ref":"CDARN1"}, {"Ref":"Bucket"}, {"Ref": "Bucket1"}]
        }
    ]
      },
    "Users" : [
	{
	"Ref":"circleci"
	}
	]
   	}
	},


      "Ec2InstanceProfile":{
         "Type":"AWS::IAM::InstanceProfile",
	"DependsOn": "CodeDeployEC2ServiceRole",
         "Properties":{
	    
            "InstanceProfileName":"ec2instanceprofile",
            "Path":"/",
            "Roles":[
               {
                  "Ref":"CodeDeployEC2ServiceRole"
               }
            ]
         }

      },
"LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "load-balancer",
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Ref": "LBSG"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnetKey3"
          },
          {
            "Ref": "PublicSubnetKey2"
          },
          {
            "Ref": "PublicSubnetKey1"
          }
        ],
        "Type": "application",
        "IpAddressType": "ipv4",
        "Tags": [
          {
            "Key": "Name",
            "Value": "CSYE_6225_AutoScaling"
          }
        ]
      }
    },
    "ALBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "LBTarget",
        "Port": "8080",
        "HealthCheckPort": "8080",
        "Matcher": {
          "HttpCode": "401,200"
        },
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 20,
        "HealthyThresholdCount": 3,
        "Protocol": "HTTP",
        "VpcId": {
          "Ref": "VpcID"
        },
        "TargetGroupAttributes":[
          {
              "Value": "600",
              "Key": "deregistration_delay.timeout_seconds"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "CSYE_6225_AutoScaling"
          }
        ]
      }
    },

    "MyAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnetKey1"
          },
          {
            "Ref": "PublicSubnetKey2"
          },
	{
            "Ref": "PublicSubnetKey3"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "AutoScalingConfig"
        },
        "TargetGroupARNs": [
          {
            "Ref": "ALBTargetGroup"
          }
        ],
        "MinSize": "3",
        "MaxSize": "10",
        "DesiredCapacity": "3",
        "Tags": [
          {
            "PropagateAtLaunch": true,
            "Key": "Name",
            "Value": "CSYE_6225_AutoScaling"
          }
        ]
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "MyAutoScalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "MyAutoScalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "MyAutoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
   "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "MyAutoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },

	"Route53RecordSetA": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "LoadBalancer",
              "DNSName"
            ]
          },
          "EvaluateTargetHealth": "true",
          "HostedZoneId": {
            "Fn::GetAtt": [
              "LoadBalancer",
              "CanonicalHostedZoneID"
            ]
          }
        },
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DOMAIN"
              },
              "."
            ]
          ]
        },
        "Comment": "DNS name for my instance.",
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DOMAIN"
              },
              "."
            ]
          ]
        },
        "Type": "A"
      }
    },
      "CodeDeployApplication":{
         "Type":"AWS::CodeDeploy::Application",
         "Properties":{
            "ApplicationName":"csye6225-webapp",
            "ComputePlatform":"Server"
         }
      },
      "DeploymentGroup":{
         "Type":"AWS::CodeDeploy::DeploymentGroup",
         "Properties":{
            "ApplicationName":{"Ref":"CodeDeployApplication"},
            "DeploymentGroupName":"csye6225-webapp-deployment",
 	    "AutoScalingGroups" : [ { "Ref": "MyAutoScalingGroup" } ],
            "DeploymentStyle":{
               "DeploymentType":"IN_PLACE",
               "DeploymentOption":"WITHOUT_TRAFFIC_CONTROL"
            },
            "Ec2TagFilters":[
               {
                  "Key":"Name",
                  "Type":"KEY_AND_VALUE",
                  "Value":"ec2"
               }
            ],
            "ServiceRoleArn":{
               "Fn::GetAtt":[
                  "CodeDeployServiceRole", "Arn"
               ]
            },
            "DeploymentConfigName":"CodeDeployDefault.AllAtOnce",
            
            "AutoRollbackConfiguration":{
               "Enabled":"True",
               "Events": [ "DEPLOYMENT_FAILURE" ] 
               
            }
         }
      },
   
   "Listener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "CERTIFICATE"
            }
          }
        ],
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "ALBTargetGroup"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "LoadBalancer"
        },
        "Port": "443",
        "Protocol": "HTTPS"
      }
    }
  },
   "Outputs":{
      "RDSInstance":{
         "Description":"The RDS Instance for Backend Database",
         "Value":{
            "Ref":"RDSInstance"
         },
         "Export":{
            "Name":{
               "Fn::Sub":"RDSInstanceID"
            }
         }
      },
      "DynamoDBTable":{
         "Description":"The DynamoDBTableId",
         "Value":{
            "Ref":"DynamoDBTable"
         },
         "Export":{
            "Name":{
               "Fn::Sub":"DynamoDBTableID"
            }
         }
      }
   }
}


